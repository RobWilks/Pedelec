/*Begining of Auto generated code by Atmel studio */
#include <Arduino.h>

/*End of auto generated code by Atmel studio */

// Speed Derestrictor
// Rob Wilkinson
// 8 Nov 2019
//
//                                 ATMEL ATTINY 85
//
//                                     +-\/-+
// (PCINT5/RESET/ADC0/dW)        PB5  1|    |8  Vcc
// (PCINT3/XTAL1/OC1B/ADC3)      PB3  2|    |7  PB2 (SCK/USCK/SCL/ADC1/T0/INT0/PCINT2)
// (PCINT4/XTAL2/CLKO/OC1B/ADC2) PB4  3|    |6  PB1 (MISO/DO/AIN1/OC0B/OC1A/PCINT1)
//                               GND  4|    |5  PB0 (MOSI/DI/SDA/AIN0/OC0A/OC1A/AREF/PCINT0)
//                                     +----+
// reedSwitchPin PB2;     // port of the reed switch (physical pin above)
// electromagnetPin1 PB3;     // two EM ports
// electromagnetPin2 PB4;     //
// ledEMPin PB1;        // shows EM status
// ledSleepPin PB0;       // LED to show sleeping


#include <Sleepy.h>
#include <avr/sleep.h>    // Sleep Modes
#include <avr/power.h>



const long timeDebounce = 1; //debouncing time in milliseconds
const long timeOutputPulse = 30; // duration of electromagnet pulse in milliseconds
const long timeSleep = 30000; // elapsed time before shutdown in milliseconds
const long timeSlowest = 4000; // timeLow is a threshold time of revolution. For values smaller than this threshold the electromagnet pulse frequency is reduced
const long timeSlow = 800; // timeLow is a threshold time of revolution. For values smaller than this threshold the electromagnet pulse frequency is reduced
const long timeFast = 330; // second threshold time of revolution. For values smaller than this threshold the electromagnet pulse frequency is constant
const long distSensorAxle = 300;  // normal distance from reed switch magnet to axle in mm. To do calculate time thresholds from sensor position

// variables will change:
unsigned long timeNow;
unsigned long timeStart;  // time when reed switch goes LOW
unsigned long timeEnd;  // time when reed switch goes HIGH
unsigned long timeRev;  // duration reed switch closed
unsigned long timePulseOn; // time for next pulse to electromagnet
unsigned long timePulseOff; // time for next pulse to electromagnet
unsigned long timeDelta; // time between electromagnet pulses
unsigned long kappa; // constant relating input and output frequencies
bool oldState; // was reed switch open?
bool newState; // is reed switch open?
bool electromagnetState; // is electromagnet on?

static volatile byte watchdogCounter;

/////////////////////////////////////////////////////////////////////////
// boilerplate for low-power waiting
ISR(WDT_vect)
{
	Sleepy::watchdogEvent();
}

/////////////////////////////////////////////////////////////////////////
ISR (INT0_vect)          //External interrupt_zero ISR
{
}
/////////////////////////////////////////////////////////////////////////
void sleep()
{
	GIMSK |= _BV(INT0);                     // Enable INT0 Interrupts
	MCUCR &= 0xfc;                          // ISC01 ISC00 0 0 The low level of INT0 generates an interrupt request.
	ADCSRA &= ~_BV(ADEN);                   // ADC off
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);    //
	sleep_enable();                         // Sets the Sleep Enable bit in the MCUCR Register (SE BIT)
	sei();                                  // Enable interrupts
	sleep_cpu();                            // sleep
	cli();                                  // Disable interrupts
	GIMSK &= ~_BV(INT0);                    // Disable INT0 Interrupts
	sleep_disable();                        // Clear SE bit
	ADCSRA |= _BV(ADEN);                    // ADC on
	sei();                                  // Enable interrupts
} // sleep
/////////////////////////////////////////////////////////////////////////

uint32_t calcTimeDelta(uint32_t dt)
{
	if (dt > timeSlowest) return 0;
	if (dt > timeSlow) return dt;
	uint32_t deltaT = ((timeSlow << 10) - (timeSlow - dt) * kappa) >> 10;
	if (deltaT < timeFast) return timeFast;
	return deltaT;
}
/////////////////////////////////////////////////////////////////////////

void initState()
{
	timeStart = millis();
	timePulseOn = timeStart;
	oldState = HIGH;
	electromagnetState = LOW;
	timeDelta = 0; // when 0 EM cannot be turned on
}

/////////////////////////////////////////////////////////////////////////

void setup()
{
	PORTB = (1 << PB2); // PB2 has a pull-up
	DDRB = ((1 << DDB0) | (1 << DDB1) | (1 << DDB3) | (1 << DDB4)); // 4 ports are outputs and 2 inputs
	initState();
	kappa = ((timeSlow - timeFast) << 10) / (timeSlow - (timeFast >> 1)); // we calculate 1024 * kappa
}



/////////////////////////////////////////////////////////////////////////

void loop()
{
	timeNow = millis();
	timeRev = timeNow - timeStart; // strictly time since last reed pulse

	newState = bool(PINB >> PINB2);
	
	if(newState != oldState)
	{
		delay(timeDebounce);  // this delays the main loop and reduces accuracy of other timing
		if (newState == bool(PINB >> PINB2))
		{
			oldState = newState;
			if (newState == LOW)
			{
				timeDelta = calcTimeDelta(timeRev); // calculate the time between successive EM pulses
				timeStart = timeNow;
			}
			else
			{
				timeEnd = timeNow; // To do: use the duration of the reed switch pulse
			}
		}
	}
	

	
	if (electromagnetState)
	{
		if (timeNow > timePulseOff)  // turn off EM
		{
			PORTB &= ~((1 << PB1) | (1 << PB3) | (1 << PB4));
			electromagnetState = LOW;
		}
	}
	else
	if ((timeNow > timePulseOn) && (timeDelta != 0)) // turn on EM
	{
		PORTB |= ((1 << PB1) | (1 << PB3) | (1 << PB4));
		electromagnetState = HIGH;
		timePulseOff = timeNow + timeOutputPulse;  // set time to turn off EM
		timePulseOn = timeNow + timeDelta; // set time for next EM pulse
	}
	
	
	if (timeRev > timeSlowest)
	{
		timeDelta = 0; // stop pulsing the electromagnet if there is no input to reed switch
		
		
		if (timeRev > timeSleep)
		{
			if (!electromagnetState)  // only sleep when the EM is off
			{
				PORTB |= (1 << PB0);
				sleep();
				PORTB &= ~(1 << PB0);
				initState();  // all state variables initialised after sleep
			}
		}
	}
}
